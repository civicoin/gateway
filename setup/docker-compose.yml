services:
    mongo1:
        hostname: mongo1
        build:
            context: .
            dockerfile: ./MONGO.DOCKERFILE
        ports:
            - 27701:27701
        restart: on-failure
        command: mongod --bind_ip_all --replSet mongo-set --port 27701 --keyFile /etc/mongo-key
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://mongo1:27701
            interval: 10s
            timeout: 10s
            retries: 5
        env_file:
            - ./.docker.env
        networks:
            - internal
    mongo2:
        hostname: mongo2
        build:
            context: .
            dockerfile: ./MONGO.DOCKERFILE
        ports:
            - 27702:27702
        restart: on-failure
        command: mongod --bind_ip_all --replSet mongo-set --port 27702 --keyFile /etc/mongo-key
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb://mongo2:27702
            interval: 10s
            timeout: 10s
            retries: 5
        env_file:
            - ./.docker.env
        networks:
            - internal
    mongoinit:
        build:
            context: .
            dockerfile: ./MONGO.DOCKERFILE
        restart: 'no'
        depends_on:
            mongo1:
                condition: service_healthy
            mongo2:
                condition: service_healthy
        entrypoint: ['/bin/bash', '/scripts/mongodb_rs_init.sh']
        env_file:
            - ./.docker.env
        networks:
            - internal
    rabbitmq:
        hostname: rabbitmq
        image: rabbitmq:3-management
        ports:
            - 5672:5672
            - 15672:15672
        restart: on-failure
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 5s
            timeout: 60s
            retries: 10
        env_file:
            - ./.docker.env
        networks:
            - internal
    gateway:
        hostname: gateway
        build:
            context: ..
            dockerfile: ./setup/DOCKERFILE
        ports:
            - 5000:5000
        restart: on-failure
        depends_on:
            mongo1:
                condition: service_healthy
            mongo2:
                condition: service_healthy
            mongoinit:
                condition: service_completed_successfully
            rabbitmq:
                condition: service_healthy
        env_file:
            - ./.docker.env
        networks:
            - internal
            - external
networks:
    internal:
        name: shared_internal_network
        external: true
    external:
        driver: bridge
